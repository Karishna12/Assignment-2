#!/bin/bash

# Function to check if the input file is a TSV file and is readable
check_tsv_file() {
  # Check if the file has a .tsv extension
  if [[ "$1" != *.tsv ]]; then
    echo "Error: The input file must be a TSV file."
    exit 1
  fi
  # Check if the file is readable
  if [[ ! -r "$1" ]]; then
    echo "Error: The input file is not readable."
    exit 1
  fi
}

# Function to filter the TSV file based on the given criteria
filter_tsv_file() {
  local input_file=$1
  local output_file=$(mktemp)
  
  # Extract the header
  header=$(head -n 1 "$input_file")
  
  # Check if the file is empty
  if [[ ! -s "$input_file" ]]; then
    echo "Error: The input file is empty."
    exit 1
  fi

  # Extract the data excluding the header
  data=$(tail -n +2 "$input_file")

  # Ensure the file has the correct number of columns (8 in this case)
  expected_columns=8
  actual_columns=$(echo "$header" | awk -F'\t' '{print NF}')
  if [[ "$actual_columns" -ne "$expected_columns" ]]; then
    echo "Error: The input file does not have the expected number of columns ($expected_columns)."
    exit 1
  fi

  # Use awk to filter entities with at least three Cantril Ladder Score values
  echo "$header" > "$output_file"
  echo "$data" | awk -F '\t' '
  {
    if ($8 != "" && $8 ~ /^[0-9]+(\.[0-9]+)?$/) {  # Check if Cantril Ladder Score is a valid number
      entity[$1]++
      rows[NR] = $0
    }
  }
  END {
    for (i = 1; i <= NR; i++) {
      split(rows[i], row, "\t")
      if (entity[row[1]] >= 3) {
        print rows[i]
      }
    }
  }' >> "$output_file"

  echo "$output_file"
}

# Function to compute Pearson correlation
compute_pearson_correlation() {
  local input_file=$1
  local predictors=("GDP per capita" "Population" "Homicide Rate" "Life Expectancy")
  local columns=(4 5 6 7)

  # Temporary files to store correlations for each predictor
  for predictor in "${predictors[@]}"; do
    > "${predictor// /_}_correlations.txt"
  done

  # Function to compute correlation for a given entity and predictor
  compute_entity_correlation() {
    local entity=$1
    local predictor=$2
    local column=$3

    # Extract values for the current entity and predictor
    awk -F'\t' -v entity="$entity" -v col="$column" '$1 == entity {print $col, $8}' "$input_file" > temp_values.txt

    # Compute Pearson correlation using awk
    local count=$(awk 'END {print NR}' temp_values.txt)
    if [ "$count" -ge 3 ]; then
      local correlation=$(awk '
      BEGIN {sum_x=0; sum_y=0; sum_x2=0; sum_y2=0; sum_xy=0}
      {
        # Check if the columns contain valid numbers
        if ($1 ~ /^[0-9]+(\.[0-9]+)?$/ && $2 ~ /^[0-9]+(\.[0-9]+)?$/) {
          sum_x+=$1; sum_y+=$2; sum_x2+=$1*$1; sum_y2+=$2*$2; sum_xy+=$1*$2
        }
      }
      END {
        n=NR
        numerator=(n*sum_xy)-(sum_x*sum_y)
        denominator=sqrt((n*sum_x2)-(sum_x*sum_x))*sqrt((n*sum_y2)-(sum_y*sum_y))
        if (denominator != 0) {
          corr=numerator/denominator
        } else {
          corr="N/A"
        }
        print corr
      }' temp_values.txt)

      if [[ "$correlation" != "N/A" ]]; then
        echo "$correlation" >> "${predictor// /_}_correlations.txt"
      fi
    fi

    rm -f temp_values.txt
  }

  # Loop through each entity and predictor
  awk -F'\t' 'NR>1 {print $1}' "$input_file" | sort | uniq | while read entity; do
    for i in ${!columns[@]}; do
      compute_entity_correlation "$entity" "${predictors[$i]}" "${columns[$i]}"
    done
  done

  # Compute mean correlation for each predictor and identify the best predictor
  best_predictor=""
  best_correlation=0

  compute_mean_correlation() {
    local predictor=$1
    local mean_corr=$(awk '
    {sum += $1; count++}
    END {if (count > 0) print sum / count; else print "N/A"}
    ' "${predictor// /_}_correlations.txt")

    mean_corr=$(printf "%.3f" "$mean_corr")
    echo "Mean correlation of ${predictor} with Cantril ladder is ${mean_corr}"

    if [[ "$mean_corr" != "N/A" ]]; then
      local abs_mean_corr=$(echo "$mean_corr" | awk '{print ($1 >= 0) ? $1 : -$1}')
      if (( $(echo "$abs_mean_corr > $best_correlation" | bc -l) )); then
        best_correlation=$abs_mean_corr
        best_predictor="${predictor} (r = ${mean_corr})"
      fi
    fi
  }

  for predictor in "${predictors[@]}"; do
    compute_mean_correlation "$predictor"
  done

  echo "Most predictive mean correlation with the Cantril ladder is ${best_predictor}"

  # Cleanup temporary correlation files
  for predictor in "${predictors[@]}"; do
    rm -f "${predictor// /_}_correlations.txt"
  done
}

# Main script execution
main() {
  # Check if the correct number of arguments is provided
  if [ "$#" -ne 1 ]; then
    echo "Usage: $0 <input_file.tsv>"
    exit 1
  fi

  local input_file=$1

  # Check if the input file is a TSV file and is readable
  check_tsv_file "$input_file"

  # Filter the input file to create a temporary filtered file
  local filtered_file=$(filter_tsv_file "$input_file")

  # Compute Pearson correlation using the filtered file
  compute_pearson_correlation "$filtered_file"

  # Remove the temporary filtered file
  rm -f "$filtered_file"
}

# Call the main function with all script arguments
main "$@"
